// frontend/src/routes/dashboard/+layout.server.ts
// ‚úÖ FIXED Dashboard auth protection + Proper server-client sync
// Server-side authentication check with proper state passing

import { redirect, type Cookies } from '@sveltejs/kit';
import { dev } from '$app/environment';
import type { UserInfo } from '$lib/types/auth.types';

// ‚úÖ Define parameter types explicitly
interface LoadParams {
  cookies: Cookies;
  url: URL;
  fetch: typeof fetch;
}

// ‚úÖ Define return type explicitly and export it
export interface LayoutData {
  isAuthenticated: boolean;
  user: UserInfo | null;
  currentPath: string;
  currentSearch: string;
  debug?: {
    hasAccessToken: boolean;
    hasRefreshToken: boolean;
    hasUserData: boolean;
    cookieUserData: boolean;
  };
}

// ============================================
// AUTH PROTECTION FOR DASHBOARD
// ============================================

export const load = async ({ cookies, url, fetch }: LoadParams): Promise<LayoutData> => {
  console.log('üîê Dashboard auth check...', url.pathname);
  
  // Check authentication tokens from cookies
  const accessToken = cookies.get('accessToken');
  const refreshToken = cookies.get('refreshToken');
  
  console.log('üìã Cookie status:', {
    hasAccessToken: !!accessToken,
    hasRefreshToken: !!refreshToken,
    path: url.pathname
  });
  
  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÄ‡∏•‡∏¢ -> redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (!accessToken && !refreshToken) {
    console.log('‚ùå No auth tokens found, redirecting to login');
    
    const loginUrl = `/login?redirect=${encodeURIComponent(url.pathname + url.search)}`;
    throw redirect(302, loginUrl);
  }
  
  // ‚úÖ ‡∏°‡∏µ refreshToken ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ accessToken -> ‡∏•‡∏≠‡∏á refresh
  if (!accessToken && refreshToken) {
    console.log('üîÑ Access token missing, attempting refresh...');
    
    try {
      const refreshResponse = await fetch('/api/auth/refresh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `refreshToken=${refreshToken}`
        },
        body: JSON.stringify({})
      });
      
      if (!refreshResponse.ok) {
        console.log('‚ùå Token refresh failed, redirecting to login');
        const loginUrl = `/login?redirect=${encodeURIComponent(url.pathname + url.search)}`;
        throw redirect(302, loginUrl);
      }
      
      console.log('‚úÖ Token refreshed successfully');
    } catch (error) {
      console.error('‚ùå Refresh error:', error);
      const loginUrl = `/login?redirect=${encodeURIComponent(url.pathname + url.search)}`;
      throw redirect(302, loginUrl);
    }
  }
  
  // ‚úÖ Get user data from cookie (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const userDataCookie = cookies.get('userData');
  let userData: UserInfo | null = null;
  
  if (userDataCookie) {
    try {
      userData = JSON.parse(decodeURIComponent(userDataCookie)) as UserInfo;
      console.log('üë§ User data loaded from cookie:', {
        username: userData.username,
        fullName: userData.fname && userData.lname ? `${userData.fname} ${userData.lname}` : userData.username,
        role: userData.userRoleId,
        hospital: userData.hospital?.hospitalName
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to parse userData cookie:', error);
      userData = null;
    }
  }
  
  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ userData ‡πÉ‡∏ô cookie ‡πÅ‡∏ï‡πà‡∏°‡∏µ token -> ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
  if (!userData && (accessToken || refreshToken)) {
    console.log('üîÑ No user data in cookie, fetching from API...');
    
    try {
      const profileResponse = await fetch('/api/auth/profile', {
        headers: {
          'Cookie': `accessToken=${accessToken}; refreshToken=${refreshToken}`
        }
      });
      
      if (profileResponse.ok) {
        const profileData = await profileResponse.json();
        if (profileData.success) {
          userData = profileData.data as UserInfo;
          console.log('‚úÖ User data fetched from API');
          
          // ‚úÖ Set userData cookie ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          cookies.set('userData', encodeURIComponent(JSON.stringify(userData)), {
            path: '/',
            maxAge: 60 * 60 * 24 * 7, // 7 days
            httpOnly: false, // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ client ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            secure: !dev, // secure ‡πÉ‡∏ô production ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            sameSite: 'strict'
          });
        }
      } else {
        console.warn('‚ö†Ô∏è Failed to fetch user profile');
      }
    } catch (error) {
      console.error('‚ùå Profile fetch error:', error);
    }
  }
  
  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ userData -> ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  if (!userData) {
    console.warn('‚ö†Ô∏è No user data available despite having tokens');
    
    // ‚úÖ ‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô data corruption
    // ‡πÑ‡∏°‡πà redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á flag ‡πÉ‡∏´‡πâ client handle
  }
  
  console.log('‚úÖ Auth check completed:', {
    hasUserData: !!userData,
    isAuthenticated: !!(userData && (accessToken || refreshToken)),
    userId: userData?.id,
    username: userData?.username
  });
  
  // ‚úÖ Return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client
  return {
    // ‚úÖ Authentication state
    isAuthenticated: !!(userData && (accessToken || refreshToken)),
    user: userData,
    
    // ‚úÖ Page metadata
    currentPath: url.pathname,
    currentSearch: url.search,
    
    // ‚úÖ Debugging info (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development)
    ...(dev && {
      debug: {
        hasAccessToken: !!accessToken,
        hasRefreshToken: !!refreshToken,
        hasUserData: !!userData,
        cookieUserData: !!userDataCookie
      }
    })
  };
};